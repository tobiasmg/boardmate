{"ast":null,"code":"var _jsxFileName = \"/Users/tgira1018/chess-training-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ChevronLeft, RotateCcw, Play, BookOpen, Target } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessTrainingApp = () => {\n  _s();\n  // State for responsive design\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Initial board setup\n  const initialBoard = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [currentPlayer, setCurrentPlayer] = useState('white');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameMode, setGameMode] = useState('menu');\n  const [trainingMode, setTrainingMode] = useState(null);\n  const [feedback, setFeedback] = useState('');\n  const [score, setScore] = useState({\n    correct: 0,\n    total: 0\n  });\n\n  // Opening databases\n  const openingDatabases = {\n    sicilianDragon: {\n      name: \"Sicilian Defence - Accelerated Dragon\",\n      color: \"black\",\n      moves: {\n        \"\": [\"e2-e4\"],\n        \"e2-e4\": [\"c7-c5\"],\n        \"e2-e4,c7-c5\": [\"g1-f3\"],\n        \"e2-e4,c7-c5,g1-f3\": [\"g7-g6\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6\": [\"d2-d4\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4\": [\"c5-d4\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4,c5-d4\": [\"f3-d4\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4,c5-d4,f3-d4\": [\"f8-g7\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4,c5-d4,f3-d4,f8-g7\": [\"c2-c4\", \"b1-c3\", \"f2-f3\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4,c5-d4,f3-d4,f8-g7,c2-c4\": [\"b8-c6\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4,c5-d4,f3-d4,f8-g7,b1-c3\": [\"b8-c6\"]\n      }\n    },\n    scotchGame: {\n      name: \"Scotch Game\",\n      color: \"white\",\n      moves: {\n        \"\": [\"e2-e4\"],\n        \"e2-e4\": [\"e7-e5\"],\n        \"e2-e4,e7-e5\": [\"g1-f3\"],\n        \"e2-e4,e7-e5,g1-f3\": [\"b8-c6\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6\": [\"d2-d4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4\": [\"e5-d4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4\": [\"f3-d4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f3-d4\": [\"f8-c5\", \"g8-f6\", \"d8-h4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f3-d4,f8-c5\": [\"d4-b5\", \"d4-c6\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f3-d4,g8-f6\": [\"d4-c6\", \"b1-c3\"]\n      }\n    },\n    scotchGambit: {\n      name: \"Scotch Gambit\",\n      color: \"white\",\n      moves: {\n        \"\": [\"e2-e4\"],\n        \"e2-e4\": [\"e7-e5\"],\n        \"e2-e4,e7-e5\": [\"g1-f3\"],\n        \"e2-e4,e7-e5,g1-f3\": [\"b8-c6\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6\": [\"d2-d4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4\": [\"e5-d4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4\": [\"f1-c4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f1-c4\": [\"f8-c5\", \"g8-f6\", \"f7-f5\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f1-c4,f8-c5\": [\"c2-c3\", \"e1-g1\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f1-c4,g8-f6\": [\"e4-e5\", \"c2-c3\"]\n      }\n    }\n  };\n\n  // Piece Unicode symbols (chess.com style)\n  const pieceSymbols = {\n    'K': '♔',\n    'Q': '♕',\n    'R': '♖',\n    'B': '♗',\n    'N': '♘',\n    'P': '♙',\n    'k': '♚',\n    'q': '♛',\n    'r': '♜',\n    'b': '♝',\n    'n': '♞',\n    'p': '♟'\n  };\n\n  // Helper functions\n  const getSquareName = (row, col) => {\n    return String.fromCharCode(97 + col) + (8 - row);\n  };\n  const parseSquareName = square => {\n    const col = square.charCodeAt(0) - 97;\n    const row = 8 - parseInt(square[1]);\n    return [row, col];\n  };\n  const isPieceWhite = piece => piece && piece === piece.toUpperCase();\n  const isValidMove = (fromRow, fromCol, toRow, toCol, piece) => {\n    if (toRow < 0 || toRow >= 8 || toCol < 0 || toCol >= 8) return false;\n    const targetPiece = board[toRow][toCol];\n    if (targetPiece && isPieceWhite(piece) === isPieceWhite(targetPiece)) return false;\n    const rowDiff = Math.abs(toRow - fromRow);\n    const colDiff = Math.abs(toCol - fromCol);\n    const piece_type = piece.toLowerCase();\n    switch (piece_type) {\n      case 'p':\n        const direction = isPieceWhite(piece) ? -1 : 1;\n        const startRow = isPieceWhite(piece) ? 6 : 1;\n        if (toCol === fromCol) {\n          if (toRow === fromRow + direction && !targetPiece) return true;\n          if (fromRow === startRow && toRow === fromRow + 2 * direction && !targetPiece) return true;\n        } else if (Math.abs(toCol - fromCol) === 1 && toRow === fromRow + direction) {\n          return !!targetPiece;\n        }\n        return false;\n      case 'r':\n        return (rowDiff === 0 || colDiff === 0) && !isPathBlocked(fromRow, fromCol, toRow, toCol);\n      case 'n':\n        return rowDiff === 2 && colDiff === 1 || rowDiff === 1 && colDiff === 2;\n      case 'b':\n        return rowDiff === colDiff && !isPathBlocked(fromRow, fromCol, toRow, toCol);\n      case 'q':\n        return (rowDiff === 0 || colDiff === 0 || rowDiff === colDiff) && !isPathBlocked(fromRow, fromCol, toRow, toCol);\n      case 'k':\n        return rowDiff <= 1 && colDiff <= 1;\n      default:\n        return false;\n    }\n  };\n  const isPathBlocked = (fromRow, fromCol, toRow, toCol) => {\n    const rowDir = toRow > fromRow ? 1 : toRow < fromRow ? -1 : 0;\n    const colDir = toCol > fromCol ? 1 : toCol < fromCol ? -1 : 0;\n    let currentRow = fromRow + rowDir;\n    let currentCol = fromCol + colDir;\n    while (currentRow !== toRow || currentCol !== toCol) {\n      if (board[currentRow][currentCol]) return true;\n      currentRow += rowDir;\n      currentCol += colDir;\n    }\n    return false;\n  };\n  const makeMove = (fromRow, fromCol, toRow, toCol) => {\n    const newBoard = board.map(row => [...row]);\n    const piece = newBoard[fromRow][fromCol];\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = null;\n    const moveNotation = `${getSquareName(fromRow, fromCol)}-${getSquareName(toRow, toCol)}`;\n    setBoard(newBoard);\n    setMoveHistory(prev => [...prev, moveNotation]);\n    setCurrentPlayer(currentPlayer === 'white' ? 'black' : 'white');\n    return moveNotation;\n  };\n  const makeOpponentMove = () => {\n    const opening = openingDatabases[trainingMode];\n    const nextMoveKey = moveHistory.join(',');\n    const opponentMoves = opening.moves[nextMoveKey];\n    console.log('Looking for opponent move with key:', nextMoveKey);\n    console.log('Available moves:', opponentMoves);\n    if (opponentMoves && opponentMoves.length > 0) {\n      // Wait a bit to simulate thinking time\n      setTimeout(() => {\n        const opponentMove = opponentMoves[Math.floor(Math.random() * opponentMoves.length)];\n        console.log('Making opponent move:', opponentMove);\n        const [fromSquare, toSquare] = opponentMove.split('-');\n        const [fromRow, fromCol] = parseSquareName(fromSquare);\n        const [toRow, toCol] = parseSquareName(toSquare);\n        makeMove(fromRow, fromCol, toRow, toCol);\n      }, 600);\n    } else {\n      console.log('No opponent moves found for key:', nextMoveKey);\n      setFeedback('End of opening line - great job!');\n    }\n  };\n  const handleSquareClick = (row, col) => {\n    if (gameMode !== 'training') return;\n    const piece = board[row][col];\n    if (selectedSquare) {\n      const [fromRow, fromCol] = selectedSquare;\n      const fromPiece = board[fromRow][fromCol];\n      if (row === fromRow && col === fromCol) {\n        setSelectedSquare(null);\n        return;\n      }\n      if (isValidMove(fromRow, fromCol, row, col, fromPiece)) {\n        const userMove = makeMove(fromRow, fromCol, row, col);\n        checkMove(userMove);\n        setSelectedSquare(null);\n      } else {\n        setSelectedSquare(piece && isPieceWhite(piece) === (currentPlayer === 'white') ? [row, col] : null);\n      }\n    } else {\n      if (piece && isPieceWhite(piece) === (currentPlayer === 'white')) {\n        setSelectedSquare([row, col]);\n      }\n    }\n  };\n  const checkMove = userMove => {\n    const opening = openingDatabases[trainingMode];\n    const moveKey = moveHistory.slice(0, -1).join(',');\n    const expectedMoves = opening.moves[moveKey] || [];\n    if (expectedMoves.includes(userMove)) {\n      setFeedback('✓ Correct move!');\n      setScore(prev => ({\n        correct: prev.correct + 1,\n        total: prev.total + 1\n      }));\n      setTimeout(() => {\n        const nextMoveKey = moveHistory.join(',');\n        const aiMoves = opening.moves[nextMoveKey];\n        if (aiMoves && aiMoves.length > 0) {\n          const aiMove = aiMoves[Math.floor(Math.random() * aiMoves.length)];\n          const [fromSquare, toSquare] = aiMove.split('-');\n          const [fromRow, fromCol] = parseSquareName(fromSquare);\n          const [toRow, toCol] = parseSquareName(toSquare);\n          makeMove(fromRow, fromCol, toRow, toCol);\n        }\n        setFeedback('');\n      }, 1000);\n    } else {\n      setFeedback(`✗ Not the best move. Try: ${expectedMoves.join(' or ')}`);\n      setScore(prev => ({\n        correct: prev.correct,\n        total: prev.total + 1\n      }));\n    }\n  };\n  const startTraining = mode => {\n    setTrainingMode(mode);\n    setGameMode('training');\n    setBoard(initialBoard);\n    setMoveHistory([]);\n    setCurrentPlayer('white');\n    setSelectedSquare(null);\n    setFeedback('');\n    setScore({\n      correct: 0,\n      total: 0\n    });\n  };\n  const resetGame = () => {\n    setBoard(initialBoard);\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setFeedback('');\n\n    // Reset to correct starting player and make first move if needed\n    const opening = openingDatabases[trainingMode];\n    if (opening.color === 'black') {\n      setCurrentPlayer('white');\n      setFeedback('White is making the first move...');\n      // Make the first opponent move automatically after reset\n      setTimeout(() => {\n        const firstMove = opening.moves[\"\"][0]; // Get first move (1.e4)\n        const [fromSquare, toSquare] = firstMove.split('-');\n        const [fromRow, fromCol] = parseSquareName(fromSquare);\n        const [toRow, toCol] = parseSquareName(toSquare);\n        makeMove(fromRow, fromCol, toRow, toCol);\n        setFeedback('Your turn! Make your move.');\n      }, 1000);\n    } else {\n      setCurrentPlayer('white');\n      setFeedback('Your turn! Make your opening move.');\n    }\n  };\n  const backToMenu = () => {\n    setGameMode('menu');\n    setTrainingMode(null);\n  };\n\n  // Styles\n  const styles = {\n    container: {\n      minHeight: '100vh',\n      background: 'linear-gradient(135deg, #fef7cd 0%, #fed7aa 100%)',\n      padding: '20px',\n      fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif'\n    },\n    wrapper: {\n      maxWidth: '1200px',\n      margin: '0 auto'\n    },\n    header: {\n      textAlign: 'center',\n      marginBottom: '40px'\n    },\n    title: {\n      fontSize: '2.5rem',\n      color: '#92400e',\n      marginBottom: '10px',\n      fontWeight: 'bold'\n    },\n    subtitle: {\n      color: '#a16207',\n      fontSize: '1.1rem'\n    },\n    grid: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\n      gap: '30px',\n      marginBottom: '40px'\n    },\n    card: {\n      background: 'white',\n      borderRadius: '12px',\n      padding: '30px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n      cursor: 'pointer',\n      transition: 'transform 0.2s'\n    },\n    cardHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '20px',\n      fontSize: '1.5rem',\n      fontWeight: '600'\n    },\n    cardText: {\n      color: '#6b7280',\n      marginBottom: '20px',\n      lineHeight: '1.6'\n    },\n    button: {\n      width: '100%',\n      padding: '12px 20px',\n      border: 'none',\n      borderRadius: '8px',\n      fontWeight: '600',\n      fontSize: '1rem',\n      cursor: 'pointer',\n      color: 'white'\n    },\n    gameHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: '30px',\n      flexWrap: 'wrap',\n      gap: '20px'\n    },\n    navButton: {\n      display: 'flex',\n      alignItems: 'center',\n      background: 'none',\n      border: 'none',\n      color: '#a16207',\n      fontSize: '1rem',\n      cursor: 'pointer'\n    },\n    gameTitle: {\n      textAlign: 'center'\n    },\n    gameLayout: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'flex-start',\n      gap: '30px',\n      flexWrap: 'wrap'\n    },\n    boardContainer: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    board: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(8, 1fr)',\n      gridTemplateRows: 'repeat(8, 1fr)',\n      width: isMobile ? '350px' : '500px',\n      height: isMobile ? '350px' : '500px',\n      border: '3px solid #8B4513',\n      borderRadius: '4px',\n      overflow: 'hidden',\n      boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)'\n    },\n    square: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize: isMobile ? '2.8rem' : '3.8rem',\n      cursor: 'pointer',\n      transition: 'background-color 0.15s ease, border 0.15s ease',\n      userSelect: 'none',\n      fontWeight: 'bold',\n      width: '100%',\n      height: '100%',\n      minWidth: 0,\n      minHeight: 0,\n      boxSizing: 'border-box'\n    },\n    sidebar: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '20px',\n      width: isMobile ? '100%' : '350px',\n      maxWidth: '500px'\n    },\n    infoCard: {\n      background: 'white',\n      borderRadius: '12px',\n      padding: '20px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n    },\n    infoTitle: {\n      fontSize: '1.2rem',\n      fontWeight: '600',\n      marginBottom: '15px',\n      color: '#374151'\n    }\n  };\n  if (gameMode === 'menu') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.wrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.header,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            style: styles.title,\n            children: \"Chess Opening Trainer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: styles.subtitle,\n            children: \"Master your favorite openings against AI opposition\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.grid,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.card,\n            onClick: () => startTraining('sicilianDragon'),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                ...styles.cardHeader,\n                color: '#dc2626'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Target, {\n                size: 24\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                style: {\n                  marginLeft: '10px'\n                },\n                children: \"Sicilian Dragon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: styles.cardText,\n              children: \"Practice the Accelerated Dragon as Black. White moves automatically - you learn the best responses!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                ...styles.button,\n                backgroundColor: '#dc2626'\n              },\n              children: \"Train as Black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.card,\n            onClick: () => startTraining('scotchGame'),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                ...styles.cardHeader,\n                color: '#2563eb'\n              },\n              children: [/*#__PURE__*/_jsxDEV(BookOpen, {\n                size: 24\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                style: {\n                  marginLeft: '10px'\n                },\n                children: \"Scotch Game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: styles.cardText,\n              children: \"Learn the Scotch Game as White. Black moves automatically - focus on mastering your attacking lines!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                ...styles.button,\n                backgroundColor: '#2563eb'\n              },\n              children: \"Train as White\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.card,\n            onClick: () => startTraining('scotchGambit'),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                ...styles.cardHeader,\n                color: '#16a34a'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Play, {\n                size: 24\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                style: {\n                  marginLeft: '10px'\n                },\n                children: \"Scotch Gambit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: styles.cardText,\n              children: \"Master the Scotch Gambit as White. Black responds automatically - learn the aggressive sacrificial lines!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                ...styles.button,\n                backgroundColor: '#16a34a'\n              },\n              children: \"Train as White\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this);\n  }\n  const opening = openingDatabases[trainingMode];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.wrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.gameHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: styles.navButton,\n          onClick: backToMenu,\n          children: [/*#__PURE__*/_jsxDEV(ChevronLeft, {\n            size: 20,\n            style: {\n              marginRight: '5px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this), \"Back to Menu\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.gameTitle,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: {\n              fontSize: '2rem',\n              color: '#92400e',\n              marginBottom: '5px'\n            },\n            children: opening.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: '#a16207'\n            },\n            children: [\"Playing as \", opening.color]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: styles.navButton,\n          onClick: resetGame,\n          children: [/*#__PURE__*/_jsxDEV(RotateCcw, {\n            size: 20,\n            style: {\n              marginRight: '5px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 13\n          }, this), \"Reset\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.gameLayout,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.boardContainer,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.board,\n            children: board.flatMap((row, rowIndex) => row.map((piece, colIndex) => {\n              const isLightSquare = (rowIndex + colIndex) % 2 === 0;\n              const isSelected = selectedSquare && selectedSquare[0] === rowIndex && selectedSquare[1] === colIndex;\n\n              // Chess.com style colors\n              let backgroundColor;\n              if (isSelected) {\n                backgroundColor = '#f7dc6f'; // Yellow highlight for selected\n              } else {\n                backgroundColor = isLightSquare ? '#f0d9b5' : '#b58863'; // Chess.com colors\n              }\n\n              // Enhanced piece styling for chess.com look\n              const pieceColor = isPieceWhite(piece) ? '#ffffff' : '#000000';\n              const textShadow = isPieceWhite(piece) ? '1px 1px 2px rgba(0,0,0,0.8), 0 0 3px rgba(0,0,0,0.3)' : '1px 1px 2px rgba(255,255,255,0.4), 0 0 2px rgba(255,255,255,0.2)';\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  ...styles.square,\n                  backgroundColor,\n                  border: isSelected ? '2px solid #f39c12' : 'none',\n                  color: pieceColor,\n                  textShadow: piece ? textShadow : 'none'\n                },\n                onClick: () => handleSquareClick(rowIndex, colIndex),\n                onMouseEnter: e => {\n                  if (!isSelected) {\n                    e.target.style.backgroundColor = isLightSquare ? '#ead5aa' : '#a67c52';\n                  }\n                },\n                onMouseLeave: e => {\n                  if (!isSelected) {\n                    e.target.style.backgroundColor = isLightSquare ? '#f0d9b5' : '#b58863';\n                  }\n                },\n                children: piece && pieceSymbols[piece]\n              }, `${rowIndex}-${colIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 21\n              }, this);\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.sidebar,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.infoCard,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: styles.infoTitle,\n              children: \"Game Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                marginBottom: '8px',\n                color: '#6b7280'\n              },\n              children: [\"Current turn: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  textTransform: 'capitalize',\n                  fontWeight: '600',\n                  color: '#374151'\n                },\n                children: currentPlayer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 31\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: '#6b7280'\n              },\n              children: [\"Move: \", Math.ceil(moveHistory.length / 2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                marginTop: '8px',\n                fontWeight: '600',\n                color: opening.color === 'white' && currentPlayer === 'white' || opening.color === 'black' && currentPlayer === 'black' ? '#16a34a' : '#ea580c'\n              },\n              children: opening.color === 'white' && currentPlayer === 'white' || opening.color === 'black' && currentPlayer === 'black' ? 'Your turn!' : 'Opponent thinking...'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.infoCard,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: styles.infoTitle,\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: '1.5rem',\n                fontWeight: 'bold',\n                color: '#374151',\n                marginBottom: '8px'\n              },\n              children: [score.correct, \"/\", score.total]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: '0.9rem',\n                color: '#6b7280'\n              },\n              children: score.total > 0 ? `${Math.round(score.correct / score.total * 100)}% accuracy` : 'No moves yet'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 13\n          }, this), feedback && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              borderRadius: '12px',\n              padding: '20px',\n              fontWeight: '600',\n              backgroundColor: feedback.includes('✓') ? '#dcfce7' : '#fef2f2',\n              color: feedback.includes('✓') ? '#166534' : '#991b1b',\n              border: feedback.includes('✓') ? '2px solid #22c55e' : '2px solid #ef4444'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: feedback\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.infoCard,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: styles.infoTitle,\n              children: \"Move History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                maxHeight: '200px',\n                overflowY: 'auto',\n                fontSize: '0.9rem'\n              },\n              children: moveHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  color: '#9ca3af',\n                  fontStyle: 'italic'\n                },\n                children: \"No moves yet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 19\n              }, this) : moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  marginBottom: '4px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    width: '30px',\n                    color: '#9ca3af'\n                  },\n                  children: [Math.ceil((index + 1) / 2), \".\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: index % 2 === 0 ? '#374151' : '#6b7280'\n                  },\n                  children: move\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 617,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 496,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessTrainingApp, \"osEhUbGhLsw30rSdyfAi1+Jz9OI=\");\n_c = ChessTrainingApp;\nexport default ChessTrainingApp;\nvar _c;\n$RefreshReg$(_c, \"ChessTrainingApp\");","map":{"version":3,"names":["React","useState","useEffect","ChevronLeft","RotateCcw","Play","BookOpen","Target","jsxDEV","_jsxDEV","ChessTrainingApp","_s","isMobile","setIsMobile","window","innerWidth","handleResize","addEventListener","removeEventListener","initialBoard","board","setBoard","selectedSquare","setSelectedSquare","currentPlayer","setCurrentPlayer","moveHistory","setMoveHistory","gameMode","setGameMode","trainingMode","setTrainingMode","feedback","setFeedback","score","setScore","correct","total","openingDatabases","sicilianDragon","name","color","moves","scotchGame","scotchGambit","pieceSymbols","getSquareName","row","col","String","fromCharCode","parseSquareName","square","charCodeAt","parseInt","isPieceWhite","piece","toUpperCase","isValidMove","fromRow","fromCol","toRow","toCol","targetPiece","rowDiff","Math","abs","colDiff","piece_type","toLowerCase","direction","startRow","isPathBlocked","rowDir","colDir","currentRow","currentCol","makeMove","newBoard","map","moveNotation","prev","makeOpponentMove","opening","nextMoveKey","join","opponentMoves","console","log","length","setTimeout","opponentMove","floor","random","fromSquare","toSquare","split","handleSquareClick","fromPiece","userMove","checkMove","moveKey","slice","expectedMoves","includes","aiMoves","aiMove","startTraining","mode","resetGame","firstMove","backToMenu","styles","container","minHeight","background","padding","fontFamily","wrapper","maxWidth","margin","header","textAlign","marginBottom","title","fontSize","fontWeight","subtitle","grid","display","gridTemplateColumns","gap","card","borderRadius","boxShadow","cursor","transition","cardHeader","alignItems","cardText","lineHeight","button","width","border","gameHeader","justifyContent","flexWrap","navButton","gameTitle","gameLayout","boardContainer","gridTemplateRows","height","overflow","userSelect","minWidth","boxSizing","sidebar","flexDirection","infoCard","infoTitle","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","size","marginLeft","backgroundColor","marginRight","flatMap","rowIndex","colIndex","isLightSquare","isSelected","pieceColor","textShadow","onMouseEnter","e","target","onMouseLeave","textTransform","ceil","marginTop","round","maxHeight","overflowY","fontStyle","move","index","_c","$RefreshReg$"],"sources":["/Users/tgira1018/chess-training-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ChevronLeft, RotateCcw, Play, BookOpen, Target } from 'lucide-react';\n\nconst ChessTrainingApp = () => {\n  // State for responsive design\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Initial board setup\n  const initialBoard = [\n    ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n    ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n  ];\n\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [currentPlayer, setCurrentPlayer] = useState('white');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameMode, setGameMode] = useState('menu');\n  const [trainingMode, setTrainingMode] = useState(null);\n  const [feedback, setFeedback] = useState('');\n  const [score, setScore] = useState({ correct: 0, total: 0 });\n\n  // Opening databases\n  const openingDatabases = {\n    sicilianDragon: {\n      name: \"Sicilian Defence - Accelerated Dragon\",\n      color: \"black\",\n      moves: {\n        \"\": [\"e2-e4\"],\n        \"e2-e4\": [\"c7-c5\"],\n        \"e2-e4,c7-c5\": [\"g1-f3\"],\n        \"e2-e4,c7-c5,g1-f3\": [\"g7-g6\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6\": [\"d2-d4\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4\": [\"c5-d4\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4,c5-d4\": [\"f3-d4\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4,c5-d4,f3-d4\": [\"f8-g7\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4,c5-d4,f3-d4,f8-g7\": [\"c2-c4\", \"b1-c3\", \"f2-f3\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4,c5-d4,f3-d4,f8-g7,c2-c4\": [\"b8-c6\"],\n        \"e2-e4,c7-c5,g1-f3,g7-g6,d2-d4,c5-d4,f3-d4,f8-g7,b1-c3\": [\"b8-c6\"],\n      }\n    },\n    scotchGame: {\n      name: \"Scotch Game\",\n      color: \"white\",\n      moves: {\n        \"\": [\"e2-e4\"],\n        \"e2-e4\": [\"e7-e5\"],\n        \"e2-e4,e7-e5\": [\"g1-f3\"],\n        \"e2-e4,e7-e5,g1-f3\": [\"b8-c6\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6\": [\"d2-d4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4\": [\"e5-d4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4\": [\"f3-d4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f3-d4\": [\"f8-c5\", \"g8-f6\", \"d8-h4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f3-d4,f8-c5\": [\"d4-b5\", \"d4-c6\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f3-d4,g8-f6\": [\"d4-c6\", \"b1-c3\"],\n      }\n    },\n    scotchGambit: {\n      name: \"Scotch Gambit\",\n      color: \"white\",\n      moves: {\n        \"\": [\"e2-e4\"],\n        \"e2-e4\": [\"e7-e5\"],\n        \"e2-e4,e7-e5\": [\"g1-f3\"],\n        \"e2-e4,e7-e5,g1-f3\": [\"b8-c6\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6\": [\"d2-d4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4\": [\"e5-d4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4\": [\"f1-c4\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f1-c4\": [\"f8-c5\", \"g8-f6\", \"f7-f5\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f1-c4,f8-c5\": [\"c2-c3\", \"e1-g1\"],\n        \"e2-e4,e7-e5,g1-f3,b8-c6,d2-d4,e5-d4,f1-c4,g8-f6\": [\"e4-e5\", \"c2-c3\"],\n      }\n    }\n  };\n\n  // Piece Unicode symbols (chess.com style)\n  const pieceSymbols = {\n    'K': '♔', 'Q': '♕', 'R': '♖', 'B': '♗', 'N': '♘', 'P': '♙',\n    'k': '♚', 'q': '♛', 'r': '♜', 'b': '♝', 'n': '♞', 'p': '♟'\n  };\n\n  // Helper functions\n  const getSquareName = (row, col) => {\n    return String.fromCharCode(97 + col) + (8 - row);\n  };\n\n  const parseSquareName = (square) => {\n    const col = square.charCodeAt(0) - 97;\n    const row = 8 - parseInt(square[1]);\n    return [row, col];\n  };\n\n  const isPieceWhite = (piece) => piece && piece === piece.toUpperCase();\n\n  const isValidMove = (fromRow, fromCol, toRow, toCol, piece) => {\n    if (toRow < 0 || toRow >= 8 || toCol < 0 || toCol >= 8) return false;\n\n    const targetPiece = board[toRow][toCol];\n    if (targetPiece && isPieceWhite(piece) === isPieceWhite(targetPiece)) return false;\n\n    const rowDiff = Math.abs(toRow - fromRow);\n    const colDiff = Math.abs(toCol - fromCol);\n    const piece_type = piece.toLowerCase();\n\n    switch (piece_type) {\n      case 'p':\n        const direction = isPieceWhite(piece) ? -1 : 1;\n        const startRow = isPieceWhite(piece) ? 6 : 1;\n\n        if (toCol === fromCol) {\n          if (toRow === fromRow + direction && !targetPiece) return true;\n          if (fromRow === startRow && toRow === fromRow + 2 * direction && !targetPiece) return true;\n        } else if (Math.abs(toCol - fromCol) === 1 && toRow === fromRow + direction) {\n          return !!targetPiece;\n        }\n        return false;\n\n      case 'r':\n        return (rowDiff === 0 || colDiff === 0) && !isPathBlocked(fromRow, fromCol, toRow, toCol);\n\n      case 'n':\n        return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);\n\n      case 'b':\n        return rowDiff === colDiff && !isPathBlocked(fromRow, fromCol, toRow, toCol);\n\n      case 'q':\n        return (rowDiff === 0 || colDiff === 0 || rowDiff === colDiff) && !isPathBlocked(fromRow, fromCol, toRow, toCol);\n\n      case 'k':\n        return rowDiff <= 1 && colDiff <= 1;\n\n      default:\n        return false;\n    }\n  };\n\n  const isPathBlocked = (fromRow, fromCol, toRow, toCol) => {\n    const rowDir = toRow > fromRow ? 1 : toRow < fromRow ? -1 : 0;\n    const colDir = toCol > fromCol ? 1 : toCol < fromCol ? -1 : 0;\n\n    let currentRow = fromRow + rowDir;\n    let currentCol = fromCol + colDir;\n\n    while (currentRow !== toRow || currentCol !== toCol) {\n      if (board[currentRow][currentCol]) return true;\n      currentRow += rowDir;\n      currentCol += colDir;\n    }\n\n    return false;\n  };\n\n  const makeMove = (fromRow, fromCol, toRow, toCol) => {\n    const newBoard = board.map(row => [...row]);\n    const piece = newBoard[fromRow][fromCol];\n\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = null;\n\n    const moveNotation = `${getSquareName(fromRow, fromCol)}-${getSquareName(toRow, toCol)}`;\n\n    setBoard(newBoard);\n    setMoveHistory(prev => [...prev, moveNotation]);\n    setCurrentPlayer(currentPlayer === 'white' ? 'black' : 'white');\n\n    return moveNotation;\n  };\n\n  const makeOpponentMove = () => {\n    const opening = openingDatabases[trainingMode];\n    const nextMoveKey = moveHistory.join(',');\n    const opponentMoves = opening.moves[nextMoveKey];\n\n    console.log('Looking for opponent move with key:', nextMoveKey);\n    console.log('Available moves:', opponentMoves);\n\n    if (opponentMoves && opponentMoves.length > 0) {\n      // Wait a bit to simulate thinking time\n      setTimeout(() => {\n        const opponentMove = opponentMoves[Math.floor(Math.random() * opponentMoves.length)];\n        console.log('Making opponent move:', opponentMove);\n        const [fromSquare, toSquare] = opponentMove.split('-');\n        const [fromRow, fromCol] = parseSquareName(fromSquare);\n        const [toRow, toCol] = parseSquareName(toSquare);\n        makeMove(fromRow, fromCol, toRow, toCol);\n      }, 600);\n    } else {\n      console.log('No opponent moves found for key:', nextMoveKey);\n      setFeedback('End of opening line - great job!');\n    }\n  };\n\n  const handleSquareClick = (row, col) => {\n    if (gameMode !== 'training') return;\n\n    const piece = board[row][col];\n\n    if (selectedSquare) {\n      const [fromRow, fromCol] = selectedSquare;\n      const fromPiece = board[fromRow][fromCol];\n\n      if (row === fromRow && col === fromCol) {\n        setSelectedSquare(null);\n        return;\n      }\n\n      if (isValidMove(fromRow, fromCol, row, col, fromPiece)) {\n        const userMove = makeMove(fromRow, fromCol, row, col);\n        checkMove(userMove);\n        setSelectedSquare(null);\n      } else {\n        setSelectedSquare(piece && isPieceWhite(piece) === (currentPlayer === 'white') ? [row, col] : null);\n      }\n    } else {\n      if (piece && isPieceWhite(piece) === (currentPlayer === 'white')) {\n        setSelectedSquare([row, col]);\n      }\n    }\n  };\n\n  const checkMove = (userMove) => {\n    const opening = openingDatabases[trainingMode];\n    const moveKey = moveHistory.slice(0, -1).join(',');\n    const expectedMoves = opening.moves[moveKey] || [];\n\n    if (expectedMoves.includes(userMove)) {\n      setFeedback('✓ Correct move!');\n      setScore(prev => ({ correct: prev.correct + 1, total: prev.total + 1 }));\n\n      setTimeout(() => {\n        const nextMoveKey = moveHistory.join(',');\n        const aiMoves = opening.moves[nextMoveKey];\n        if (aiMoves && aiMoves.length > 0) {\n          const aiMove = aiMoves[Math.floor(Math.random() * aiMoves.length)];\n          const [fromSquare, toSquare] = aiMove.split('-');\n          const [fromRow, fromCol] = parseSquareName(fromSquare);\n          const [toRow, toCol] = parseSquareName(toSquare);\n          makeMove(fromRow, fromCol, toRow, toCol);\n        }\n        setFeedback('');\n      }, 1000);\n    } else {\n      setFeedback(`✗ Not the best move. Try: ${expectedMoves.join(' or ')}`);\n      setScore(prev => ({ correct: prev.correct, total: prev.total + 1 }));\n    }\n  };\n\n  const startTraining = (mode) => {\n    setTrainingMode(mode);\n    setGameMode('training');\n    setBoard(initialBoard);\n    setMoveHistory([]);\n    setCurrentPlayer('white');\n    setSelectedSquare(null);\n    setFeedback('');\n    setScore({ correct: 0, total: 0 });\n  };\n\n  const resetGame = () => {\n    setBoard(initialBoard);\n    setMoveHistory([]);\n    setSelectedSquare(null);\n    setFeedback('');\n\n    // Reset to correct starting player and make first move if needed\n    const opening = openingDatabases[trainingMode];\n    if (opening.color === 'black') {\n      setCurrentPlayer('white');\n      setFeedback('White is making the first move...');\n      // Make the first opponent move automatically after reset\n      setTimeout(() => {\n        const firstMove = opening.moves[\"\"][0]; // Get first move (1.e4)\n        const [fromSquare, toSquare] = firstMove.split('-');\n        const [fromRow, fromCol] = parseSquareName(fromSquare);\n        const [toRow, toCol] = parseSquareName(toSquare);\n        makeMove(fromRow, fromCol, toRow, toCol);\n        setFeedback('Your turn! Make your move.');\n      }, 1000);\n    } else {\n      setCurrentPlayer('white');\n      setFeedback('Your turn! Make your opening move.');\n    }\n  };\n\n  const backToMenu = () => {\n    setGameMode('menu');\n    setTrainingMode(null);\n  };\n\n  // Styles\n  const styles = {\n    container: {\n      minHeight: '100vh',\n      background: 'linear-gradient(135deg, #fef7cd 0%, #fed7aa 100%)',\n      padding: '20px',\n      fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", sans-serif'\n    },\n    wrapper: {\n      maxWidth: '1200px',\n      margin: '0 auto'\n    },\n    header: {\n      textAlign: 'center',\n      marginBottom: '40px'\n    },\n    title: {\n      fontSize: '2.5rem',\n      color: '#92400e',\n      marginBottom: '10px',\n      fontWeight: 'bold'\n    },\n    subtitle: {\n      color: '#a16207',\n      fontSize: '1.1rem'\n    },\n    grid: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\n      gap: '30px',\n      marginBottom: '40px'\n    },\n    card: {\n      background: 'white',\n      borderRadius: '12px',\n      padding: '30px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n      cursor: 'pointer',\n      transition: 'transform 0.2s'\n    },\n    cardHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '20px',\n      fontSize: '1.5rem',\n      fontWeight: '600'\n    },\n    cardText: {\n      color: '#6b7280',\n      marginBottom: '20px',\n      lineHeight: '1.6'\n    },\n    button: {\n      width: '100%',\n      padding: '12px 20px',\n      border: 'none',\n      borderRadius: '8px',\n      fontWeight: '600',\n      fontSize: '1rem',\n      cursor: 'pointer',\n      color: 'white'\n    },\n    gameHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: '30px',\n      flexWrap: 'wrap',\n      gap: '20px'\n    },\n    navButton: {\n      display: 'flex',\n      alignItems: 'center',\n      background: 'none',\n      border: 'none',\n      color: '#a16207',\n      fontSize: '1rem',\n      cursor: 'pointer'\n    },\n    gameTitle: {\n      textAlign: 'center'\n    },\n    gameLayout: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'flex-start',\n      gap: '30px',\n      flexWrap: 'wrap'\n    },\n    boardContainer: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    board: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(8, 1fr)',\n      gridTemplateRows: 'repeat(8, 1fr)',\n      width: isMobile ? '350px' : '500px',\n      height: isMobile ? '350px' : '500px',\n      border: '3px solid #8B4513',\n      borderRadius: '4px',\n      overflow: 'hidden',\n      boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)'\n    },\n    square: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize: isMobile ? '2.8rem' : '3.8rem',\n      cursor: 'pointer',\n      transition: 'background-color 0.15s ease, border 0.15s ease',\n      userSelect: 'none',\n      fontWeight: 'bold',\n      width: '100%',\n      height: '100%',\n      minWidth: 0,\n      minHeight: 0,\n      boxSizing: 'border-box'\n    },\n    sidebar: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '20px',\n      width: isMobile ? '100%' : '350px',\n      maxWidth: '500px'\n    },\n    infoCard: {\n      background: 'white',\n      borderRadius: '12px',\n      padding: '20px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n    },\n    infoTitle: {\n      fontSize: '1.2rem',\n      fontWeight: '600',\n      marginBottom: '15px',\n      color: '#374151'\n    }\n  };\n\n  if (gameMode === 'menu') {\n    return (\n      <div style={styles.container}>\n        <div style={styles.wrapper}>\n          <div style={styles.header}>\n            <h1 style={styles.title}>Chess Opening Trainer</h1>\n            <p style={styles.subtitle}>Master your favorite openings against AI opposition</p>\n          </div>\n\n          <div style={styles.grid}>\n            <div style={styles.card} onClick={() => startTraining('sicilianDragon')}>\n              <div style={{...styles.cardHeader, color: '#dc2626'}}>\n                <Target size={24} />\n                <h2 style={{marginLeft: '10px'}}>Sicilian Dragon</h2>\n              </div>\n              <p style={styles.cardText}>Practice the Accelerated Dragon as Black. White moves automatically - you learn the best responses!</p>\n              <button style={{...styles.button, backgroundColor: '#dc2626'}}>\n                Train as Black\n              </button>\n            </div>\n\n            <div style={styles.card} onClick={() => startTraining('scotchGame')}>\n              <div style={{...styles.cardHeader, color: '#2563eb'}}>\n                <BookOpen size={24} />\n                <h2 style={{marginLeft: '10px'}}>Scotch Game</h2>\n              </div>\n              <p style={styles.cardText}>Learn the Scotch Game as White. Black moves automatically - focus on mastering your attacking lines!</p>\n              <button style={{...styles.button, backgroundColor: '#2563eb'}}>\n                Train as White\n              </button>\n            </div>\n\n            <div style={styles.card} onClick={() => startTraining('scotchGambit')}>\n              <div style={{...styles.cardHeader, color: '#16a34a'}}>\n                <Play size={24} />\n                <h2 style={{marginLeft: '10px'}}>Scotch Gambit</h2>\n              </div>\n              <p style={styles.cardText}>Master the Scotch Gambit as White. Black responds automatically - learn the aggressive sacrificial lines!</p>\n              <button style={{...styles.button, backgroundColor: '#16a34a'}}>\n                Train as White\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const opening = openingDatabases[trainingMode];\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.wrapper}>\n        <div style={styles.gameHeader}>\n          <button style={styles.navButton} onClick={backToMenu}>\n            <ChevronLeft size={20} style={{marginRight: '5px'}} />\n            Back to Menu\n          </button>\n\n          <div style={styles.gameTitle}>\n            <h2 style={{fontSize: '2rem', color: '#92400e', marginBottom: '5px'}}>\n              {opening.name}\n            </h2>\n            <p style={{color: '#a16207'}}>Playing as {opening.color}</p>\n          </div>\n\n          <button style={styles.navButton} onClick={resetGame}>\n            <RotateCcw size={20} style={{marginRight: '5px'}} />\n            Reset\n          </button>\n        </div>\n\n        <div style={styles.gameLayout}>\n          <div style={styles.boardContainer}>\n            <div style={styles.board}>\n              {board.flatMap((row, rowIndex) =>\n                row.map((piece, colIndex) => {\n                  const isLightSquare = (rowIndex + colIndex) % 2 === 0;\n                  const isSelected = selectedSquare && selectedSquare[0] === rowIndex && selectedSquare[1] === colIndex;\n\n                  // Chess.com style colors\n                  let backgroundColor;\n                  if (isSelected) {\n                    backgroundColor = '#f7dc6f'; // Yellow highlight for selected\n                  } else {\n                    backgroundColor = isLightSquare ? '#f0d9b5' : '#b58863'; // Chess.com colors\n                  }\n\n                  // Enhanced piece styling for chess.com look\n                  const pieceColor = isPieceWhite(piece) ? '#ffffff' : '#000000';\n                  const textShadow = isPieceWhite(piece)\n                    ? '1px 1px 2px rgba(0,0,0,0.8), 0 0 3px rgba(0,0,0,0.3)'\n                    : '1px 1px 2px rgba(255,255,255,0.4), 0 0 2px rgba(255,255,255,0.2)';\n\n                  return (\n                    <div\n                      key={`${rowIndex}-${colIndex}`}\n                      style={{\n                        ...styles.square,\n                        backgroundColor,\n                        border: isSelected ? '2px solid #f39c12' : 'none',\n                        color: pieceColor,\n                        textShadow: piece ? textShadow : 'none'\n                      }}\n                      onClick={() => handleSquareClick(rowIndex, colIndex)}\n                      onMouseEnter={(e) => {\n                        if (!isSelected) {\n                          e.target.style.backgroundColor = isLightSquare ? '#ead5aa' : '#a67c52';\n                        }\n                      }}\n                      onMouseLeave={(e) => {\n                        if (!isSelected) {\n                          e.target.style.backgroundColor = isLightSquare ? '#f0d9b5' : '#b58863';\n                        }\n                      }}\n                    >\n                      {piece && pieceSymbols[piece]}\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n\n          <div style={styles.sidebar}>\n            <div style={styles.infoCard}>\n              <h3 style={styles.infoTitle}>Game Status</h3>\n              <p style={{marginBottom: '8px', color: '#6b7280'}}>\n                Current turn: <span style={{textTransform: 'capitalize', fontWeight: '600', color: '#374151'}}>{currentPlayer}</span>\n              </p>\n              <p style={{color: '#6b7280'}}>Move: {Math.ceil(moveHistory.length / 2)}</p>\n              <p style={{marginTop: '8px', fontWeight: '600', color:\n                ((opening.color === 'white' && currentPlayer === 'white') ||\n                 (opening.color === 'black' && currentPlayer === 'black')) ? '#16a34a' : '#ea580c'\n              }}>\n                {((opening.color === 'white' && currentPlayer === 'white') ||\n                  (opening.color === 'black' && currentPlayer === 'black')) ? 'Your turn!' : 'Opponent thinking...'}\n              </p>\n            </div>\n\n            <div style={styles.infoCard}>\n              <h3 style={styles.infoTitle}>Score</h3>\n              <p style={{fontSize: '1.5rem', fontWeight: 'bold', color: '#374151', marginBottom: '8px'}}>\n                {score.correct}/{score.total}\n              </p>\n              <p style={{fontSize: '0.9rem', color: '#6b7280'}}>\n                {score.total > 0 ? `${Math.round((score.correct / score.total) * 100)}% accuracy` : 'No moves yet'}\n              </p>\n            </div>\n\n            {feedback && (\n              <div style={{\n                borderRadius: '12px',\n                padding: '20px',\n                fontWeight: '600',\n                backgroundColor: feedback.includes('✓') ? '#dcfce7' : '#fef2f2',\n                color: feedback.includes('✓') ? '#166534' : '#991b1b',\n                border: feedback.includes('✓') ? '2px solid #22c55e' : '2px solid #ef4444'\n              }}>\n                <p>{feedback}</p>\n              </div>\n            )}\n\n            <div style={styles.infoCard}>\n              <h3 style={styles.infoTitle}>Move History</h3>\n              <div style={{maxHeight: '200px', overflowY: 'auto', fontSize: '0.9rem'}}>\n                {moveHistory.length === 0 ? (\n                  <p style={{color: '#9ca3af', fontStyle: 'italic'}}>No moves yet</p>\n                ) : (\n                  moveHistory.map((move, index) => (\n                    <div key={index} style={{display: 'flex', marginBottom: '4px'}}>\n                      <span style={{width: '30px', color: '#9ca3af'}}>{Math.ceil((index + 1) / 2)}.</span>\n                      <span style={{color: index % 2 === 0 ? '#374151' : '#6b7280'}}>\n                        {move}\n                      </span>\n                    </div>\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChessTrainingApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}